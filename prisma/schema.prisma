


// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// [Users Data] : ================================================================================= //

model users {
  id                  Int        @id @unique
  login               String     @unique
  displayName         String     @unique
  defaultAvatar       String
  uploadedAvatar      String?
  notifications       Json?
  wins                Int        @default(0)
  losses              Int        @default(0)
  level               Int        @default(0)
  twoFactorAuth       Boolean    @default(false)
  twoFactorAuthSecret String?
  sentRequests        Friends[]  @relation("SentRequests")
  receivedRequets     Friends[]  @relation("ReceivedRequets") //Get It To List Received Frind Request In Notifications
  blackList           Blocks[]   @relation("BlackList")
  blockedFrom         Blocks[]   @relation("BlockedUsers")
  channels            channelsUsers[] @relation("Channels")
  lastModification    DateTime   @updatedAt
}
// ================================================================================================ //


// [Relations Between Users] : ==================================================================== //

enum RELATION {
  FRIENDS
  PENDING
}

model Friends {
  id         Int     @id @default(autoincrement())
  sender     users   @relation(name: "SentRequests", fields: [senderId], references: [id])
  senderId   Int
  receiver   users   @relation(name: "ReceivedRequets", fields: [receiverId], references: [id])
  receiverId Int
  status     RELATION
}

model Blocks {
  id        Int      @id @default(autoincrement())

  user      users    @relation(name: "BlackList", fields: [userId], references: [id])
  userId    Int

  blocked   users   @relation(name: "BlockedUsers", fields: [blockedId], references: [id])
  blockedId Int

  date      DateTime @default(now())
}
// ================================================================================================ //


// [Played Matches Data] : ======================================================================== //
model MatchHistory {
  id      Int       @id @default(autoincrement())
  player1 Int
  player2 Int
  score1  Int       @default(0)
  score2  Int       @default(0)
  mode    String
  date    DateTime  @default(now())
}
// ================================================================================================ //


// [Channels/Chat/UserMessages Data] : ============================================================ //

enum CHANNEL {
  DM
  PUBLIC
  PRIVATE
  PROTECTED
}

enum PERMISSION {
  OWNER
  ADMIN
  USER
}

enum RESCTRICTION {
  BANNED
  MUTED
  RECHECK
  NULL
}

model channels {
  id       Int     @id @default(autoincrement())
  access   CHANNEL
  password String?
  users    channelsUsers[] @relation("ChannelsUsers")
}

model channelsUsers {
  id              Int          @id @default(autoincrement())

  user            users    @relation(name: "Channels", fields: [userId], references: [id])
  userId          Int

  channel         channels @relation("ChannelsUsers", fields: [channelId], references: [id])
  channelId       Int

  permission      PERMISSION

  restriction     RESCTRICTION @default(NULL)
  restrictionTime DateTime     @updatedAt
  duration        Int          @default(0)

  @@unique([userId, channelId])
}

model Messages {
  id        Int     @id @default(autoincrement())
  senderId  Int
  channelId Int
  content   String
}
// ================================================================================================ //



