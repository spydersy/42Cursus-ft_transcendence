import { User } from 'src/dtos/User.dto';
import { PrismaService } from 'src/prisma/prisma.service';
import { ChatService } from 'src/chat/chat.service';
export declare class UserService {
    private prisma;
    private chatService;
    constructor(prisma: PrismaService, chatService: ChatService);
    GetnbFriends(UserMe: string, User: string): Promise<number>;
    GetFriends(UserMe: string, User: string, res: any): Promise<any>;
    GetUserByUsername(Me: string, User: string, res: any): Promise<any>;
    BlockUser(User: string, BlockedUser: string, res: any): Promise<any>;
    UnblockUser(User: string, BlockedUser: string, res: any): Promise<any>;
    AddFriend(Sender: string, Receiver: string, res: any): Promise<any>;
    CancelRequest(Sender: string, Receiver: string, res: any): Promise<any>;
    AcceptFriendRequest(Receiver: string, Sender: string, res: any): Promise<any>;
    DeclineFriendRequest(Receiver: string, Sender: string, res: any): Promise<any>;
    UnfriendUser(Receiver: string, Sender: string, res: any): Promise<any>;
    SendFriendRequest(User1Id: number, User2Id: number, res: any): Promise<any>;
    AddUserToDB(UserProfile: User): Promise<void>;
    GetRequests(UserId: number, res: any): Promise<any>;
    GetUserById(Id: number): Promise<any>;
    GetUserByLogin(username: string): Promise<any>;
    FindUserById(UserId: number): Promise<boolean>;
    FindUserByLogin(UserLogin: string): Promise<boolean>;
    GetAllUsers(res: any): Promise<any>;
    GenerateUserDto(UserProfile: any): User;
    IsBlockedUser(User: number, BlockedUserId: number): Promise<boolean>;
    FriendsRelationExist(Sender: number, Receiver: number): Promise<import(".prisma/client").Friends>;
    DeleteFriendRelation(User1: number, User2: number): Promise<void>;
}
